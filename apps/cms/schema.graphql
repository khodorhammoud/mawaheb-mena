# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  content: Post_content_Document
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input PostUpdateInput {
  title: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: JSON
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type Feature {
  id: ID!
  title: String
  description: String
}

input FeatureWhereUniqueInput {
  id: ID
}

input FeatureWhereInput {
  AND: [FeatureWhereInput!]
  OR: [FeatureWhereInput!]
  NOT: [FeatureWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
}

input FeatureOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
}

input FeatureUpdateInput {
  title: String
  description: String
}

input FeatureUpdateArgs {
  where: FeatureWhereUniqueInput!
  data: FeatureUpdateInput!
}

input FeatureCreateInput {
  title: String
  description: String
}

type forEmployersSubHeadline {
  id: ID!
  content: String
}

input forEmployersSubHeadlineWhereUniqueInput {
  id: ID
}

input forEmployersSubHeadlineWhereInput {
  AND: [forEmployersSubHeadlineWhereInput!]
  OR: [forEmployersSubHeadlineWhereInput!]
  NOT: [forEmployersSubHeadlineWhereInput!]
  id: IDFilter
  content: StringFilter
}

input forEmployersSubHeadlineOrderByInput {
  id: OrderDirection
  content: OrderDirection
}

input forEmployersSubHeadlineUpdateInput {
  content: String
}

input forEmployersSubHeadlineUpdateArgs {
  where: forEmployersSubHeadlineWhereUniqueInput!
  data: forEmployersSubHeadlineUpdateInput!
}

input forEmployersSubHeadlineCreateInput {
  content: String
}

type HowItWorks {
  id: ID!
  stepNb: Int
  title: String
  description: String
  imageURL: String
}

input HowItWorksWhereUniqueInput {
  id: ID
}

input HowItWorksWhereInput {
  AND: [HowItWorksWhereInput!]
  OR: [HowItWorksWhereInput!]
  NOT: [HowItWorksWhereInput!]
  id: IDFilter
  stepNb: IntFilter
  title: StringFilter
  description: StringFilter
  imageURL: StringFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input HowItWorksOrderByInput {
  id: OrderDirection
  stepNb: OrderDirection
  title: OrderDirection
  description: OrderDirection
  imageURL: OrderDirection
}

input HowItWorksUpdateInput {
  stepNb: Int
  title: String
  description: String
  imageURL: String
}

input HowItWorksUpdateArgs {
  where: HowItWorksWhereUniqueInput!
  data: HowItWorksUpdateInput!
}

input HowItWorksCreateInput {
  stepNb: Int
  title: String
  description: String
  imageURL: String
}

type PostHowItWorks {
  id: ID!
  content: String
}

input PostHowItWorksWhereUniqueInput {
  id: ID
}

input PostHowItWorksWhereInput {
  AND: [PostHowItWorksWhereInput!]
  OR: [PostHowItWorksWhereInput!]
  NOT: [PostHowItWorksWhereInput!]
  id: IDFilter
  content: StringFilter
}

input PostHowItWorksOrderByInput {
  id: OrderDirection
  content: OrderDirection
}

input PostHowItWorksUpdateInput {
  content: String
}

input PostHowItWorksUpdateArgs {
  where: PostHowItWorksWhereUniqueInput!
  data: PostHowItWorksUpdateInput!
}

input PostHowItWorksCreateInput {
  content: String
}

type PreWhatTheySayAboutUs {
  id: ID!
  content: String
}

input PreWhatTheySayAboutUsWhereUniqueInput {
  id: ID
}

input PreWhatTheySayAboutUsWhereInput {
  AND: [PreWhatTheySayAboutUsWhereInput!]
  OR: [PreWhatTheySayAboutUsWhereInput!]
  NOT: [PreWhatTheySayAboutUsWhereInput!]
  id: IDFilter
  content: StringFilter
}

input PreWhatTheySayAboutUsOrderByInput {
  id: OrderDirection
  content: OrderDirection
}

input PreWhatTheySayAboutUsUpdateInput {
  content: String
}

input PreWhatTheySayAboutUsUpdateArgs {
  where: PreWhatTheySayAboutUsWhereUniqueInput!
  data: PreWhatTheySayAboutUsUpdateInput!
}

input PreWhatTheySayAboutUsCreateInput {
  content: String
}

type WhyWorkWithUs {
  id: ID!
  title: String
  description: String
}

input WhyWorkWithUsWhereUniqueInput {
  id: ID
}

input WhyWorkWithUsWhereInput {
  AND: [WhyWorkWithUsWhereInput!]
  OR: [WhyWorkWithUsWhereInput!]
  NOT: [WhyWorkWithUsWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
}

input WhyWorkWithUsOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
}

input WhyWorkWithUsUpdateInput {
  title: String
  description: String
}

input WhyWorkWithUsUpdateArgs {
  where: WhyWorkWithUsWhereUniqueInput!
  data: WhyWorkWithUsUpdateInput!
}

input WhyWorkWithUsCreateInput {
  title: String
  description: String
}

type FAQs {
  id: ID!
  faqNb: Int
  faqQuestion: String
  faqAnswer: String
}

input FAQsWhereUniqueInput {
  id: ID
}

input FAQsWhereInput {
  AND: [FAQsWhereInput!]
  OR: [FAQsWhereInput!]
  NOT: [FAQsWhereInput!]
  id: IDFilter
  faqNb: IntFilter
  faqQuestion: StringFilter
  faqAnswer: StringFilter
}

input FAQsOrderByInput {
  id: OrderDirection
  faqNb: OrderDirection
  faqQuestion: OrderDirection
  faqAnswer: OrderDirection
}

input FAQsUpdateInput {
  faqNb: Int
  faqQuestion: String
  faqAnswer: String
}

input FAQsUpdateArgs {
  where: FAQsWhereUniqueInput!
  data: FAQsUpdateInput!
}

input FAQsCreateInput {
  faqNb: Int
  faqQuestion: String
  faqAnswer: String
}

type Testimonials {
  id: ID!
  iconSVG: String
  comment: String
  imageURL: String
  name: String
  role: String
}

input TestimonialsWhereUniqueInput {
  id: ID
}

input TestimonialsWhereInput {
  AND: [TestimonialsWhereInput!]
  OR: [TestimonialsWhereInput!]
  NOT: [TestimonialsWhereInput!]
  id: IDFilter
  iconSVG: StringFilter
  comment: StringFilter
  imageURL: StringFilter
  name: StringFilter
  role: StringFilter
}

input TestimonialsOrderByInput {
  id: OrderDirection
  iconSVG: OrderDirection
  comment: OrderDirection
  imageURL: OrderDirection
  name: OrderDirection
  role: OrderDirection
}

input TestimonialsUpdateInput {
  iconSVG: String
  comment: String
  imageURL: String
  name: String
  role: String
}

input TestimonialsUpdateArgs {
  where: TestimonialsWhereUniqueInput!
  data: TestimonialsUpdateInput!
}

input TestimonialsCreateInput {
  iconSVG: String
  comment: String
  imageURL: String
  name: String
  role: String
}

type BlogCards {
  id: ID!
  imageURL: String
  name: String
  readFrom: String
  content: String
}

input BlogCardsWhereUniqueInput {
  id: ID
}

input BlogCardsWhereInput {
  AND: [BlogCardsWhereInput!]
  OR: [BlogCardsWhereInput!]
  NOT: [BlogCardsWhereInput!]
  id: IDFilter
  imageURL: StringFilter
  name: StringFilter
  readFrom: StringFilter
  content: StringFilter
}

input BlogCardsOrderByInput {
  id: OrderDirection
  imageURL: OrderDirection
  name: OrderDirection
  readFrom: OrderDirection
  content: OrderDirection
}

input BlogCardsUpdateInput {
  imageURL: String
  name: String
  readFrom: String
  content: String
}

input BlogCardsUpdateArgs {
  where: BlogCardsWhereUniqueInput!
  data: BlogCardsUpdateInput!
}

input BlogCardsCreateInput {
  imageURL: String
  name: String
  readFrom: String
  content: String
}

type Skill {
  id: ID!
  name: String
}

input SkillWhereUniqueInput {
  id: ID
}

input SkillWhereInput {
  AND: [SkillWhereInput!]
  OR: [SkillWhereInput!]
  NOT: [SkillWhereInput!]
  id: IDFilter
  name: StringFilter
}

input SkillOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input SkillUpdateInput {
  name: String
}

input SkillUpdateArgs {
  where: SkillWhereUniqueInput!
  data: SkillUpdateInput!
}

input SkillCreateInput {
  name: String
}

type Job {
  id: ID!
  jobTitle: String
  postedFrom: Int
  priceAmout: Int
  priceType: String
  levelRequired: String
  jobDesc: String
  jobSkills(where: SkillWhereInput! = {}, orderBy: [SkillOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SkillWhereUniqueInput): [Skill!]
  jobSkillsCount(where: SkillWhereInput! = {}): Int
}

input JobWhereUniqueInput {
  id: ID
}

input JobWhereInput {
  AND: [JobWhereInput!]
  OR: [JobWhereInput!]
  NOT: [JobWhereInput!]
  id: IDFilter
  jobTitle: StringFilter
  postedFrom: IntFilter
  priceAmout: IntFilter
  priceType: StringFilter
  levelRequired: StringFilter
  jobDesc: StringFilter
  jobSkills: SkillManyRelationFilter
}

input SkillManyRelationFilter {
  every: SkillWhereInput
  some: SkillWhereInput
  none: SkillWhereInput
}

input JobOrderByInput {
  id: OrderDirection
  jobTitle: OrderDirection
  postedFrom: OrderDirection
  priceAmout: OrderDirection
  priceType: OrderDirection
  levelRequired: OrderDirection
  jobDesc: OrderDirection
}

input JobUpdateInput {
  jobTitle: String
  postedFrom: Int
  priceAmout: Int
  priceType: String
  levelRequired: String
  jobDesc: String
  jobSkills: SkillRelateToManyForUpdateInput
}

input SkillRelateToManyForUpdateInput {
  disconnect: [SkillWhereUniqueInput!]
  set: [SkillWhereUniqueInput!]
  create: [SkillCreateInput!]
  connect: [SkillWhereUniqueInput!]
}

input JobUpdateArgs {
  where: JobWhereUniqueInput!
  data: JobUpdateInput!
}

input JobCreateInput {
  jobTitle: String
  postedFrom: Int
  priceAmout: Int
  priceType: String
  levelRequired: String
  jobDesc: String
  jobSkills: SkillRelateToManyForCreateInput
}

input SkillRelateToManyForCreateInput {
  create: [SkillCreateInput!]
  connect: [SkillWhereUniqueInput!]
}

type Achievement {
  id: ID!
  title: String
  count: Int
  desc: String
}

input AchievementWhereUniqueInput {
  id: ID
}

input AchievementWhereInput {
  AND: [AchievementWhereInput!]
  OR: [AchievementWhereInput!]
  NOT: [AchievementWhereInput!]
  id: IDFilter
  title: StringFilter
  count: IntFilter
  desc: StringFilter
}

input AchievementOrderByInput {
  id: OrderDirection
  title: OrderDirection
  count: OrderDirection
  desc: OrderDirection
}

input AchievementUpdateInput {
  title: String
  count: Int
  desc: String
}

input AchievementUpdateArgs {
  where: AchievementWhereUniqueInput!
  data: AchievementUpdateInput!
}

input AchievementCreateInput {
  title: String
  count: Int
  desc: String
}

type MawahebTopic {
  id: ID!
  topic: String
}

input MawahebTopicWhereUniqueInput {
  id: ID
}

input MawahebTopicWhereInput {
  AND: [MawahebTopicWhereInput!]
  OR: [MawahebTopicWhereInput!]
  NOT: [MawahebTopicWhereInput!]
  id: IDFilter
  topic: StringFilter
}

input MawahebTopicOrderByInput {
  id: OrderDirection
  topic: OrderDirection
}

input MawahebTopicUpdateInput {
  topic: String
}

input MawahebTopicUpdateArgs {
  where: MawahebTopicWhereUniqueInput!
  data: MawahebTopicUpdateInput!
}

input MawahebTopicCreateInput {
  topic: String
}

type MawahebDescription {
  id: ID!
  description: String
}

input MawahebDescriptionWhereUniqueInput {
  id: ID
}

input MawahebDescriptionWhereInput {
  AND: [MawahebDescriptionWhereInput!]
  OR: [MawahebDescriptionWhereInput!]
  NOT: [MawahebDescriptionWhereInput!]
  id: IDFilter
  description: StringFilter
}

input MawahebDescriptionOrderByInput {
  id: OrderDirection
  description: OrderDirection
}

input MawahebDescriptionUpdateInput {
  description: String
}

input MawahebDescriptionUpdateArgs {
  where: MawahebDescriptionWhereUniqueInput!
  data: MawahebDescriptionUpdateInput!
}

input MawahebDescriptionCreateInput {
  description: String
}

type Mawaheb {
  id: ID!
  mawahebTopics(where: MawahebTopicWhereInput! = {}, orderBy: [MawahebTopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MawahebTopicWhereUniqueInput): [MawahebTopic!]
  mawahebTopicsCount(where: MawahebTopicWhereInput! = {}): Int
  mawahebDescription(where: MawahebDescriptionWhereInput! = {}, orderBy: [MawahebDescriptionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MawahebDescriptionWhereUniqueInput): [MawahebDescription!]
  mawahebDescriptionCount(where: MawahebDescriptionWhereInput! = {}): Int
}

input MawahebWhereUniqueInput {
  id: ID
}

input MawahebWhereInput {
  AND: [MawahebWhereInput!]
  OR: [MawahebWhereInput!]
  NOT: [MawahebWhereInput!]
  id: IDFilter
  mawahebTopics: MawahebTopicManyRelationFilter
  mawahebDescription: MawahebDescriptionManyRelationFilter
}

input MawahebTopicManyRelationFilter {
  every: MawahebTopicWhereInput
  some: MawahebTopicWhereInput
  none: MawahebTopicWhereInput
}

input MawahebDescriptionManyRelationFilter {
  every: MawahebDescriptionWhereInput
  some: MawahebDescriptionWhereInput
  none: MawahebDescriptionWhereInput
}

input MawahebOrderByInput {
  id: OrderDirection
}

input MawahebUpdateInput {
  mawahebTopics: MawahebTopicRelateToManyForUpdateInput
  mawahebDescription: MawahebDescriptionRelateToManyForUpdateInput
}

input MawahebTopicRelateToManyForUpdateInput {
  disconnect: [MawahebTopicWhereUniqueInput!]
  set: [MawahebTopicWhereUniqueInput!]
  create: [MawahebTopicCreateInput!]
  connect: [MawahebTopicWhereUniqueInput!]
}

input MawahebDescriptionRelateToManyForUpdateInput {
  disconnect: [MawahebDescriptionWhereUniqueInput!]
  set: [MawahebDescriptionWhereUniqueInput!]
  create: [MawahebDescriptionCreateInput!]
  connect: [MawahebDescriptionWhereUniqueInput!]
}

input MawahebUpdateArgs {
  where: MawahebWhereUniqueInput!
  data: MawahebUpdateInput!
}

input MawahebCreateInput {
  mawahebTopics: MawahebTopicRelateToManyForCreateInput
  mawahebDescription: MawahebDescriptionRelateToManyForCreateInput
}

input MawahebTopicRelateToManyForCreateInput {
  create: [MawahebTopicCreateInput!]
  connect: [MawahebTopicWhereUniqueInput!]
}

input MawahebDescriptionRelateToManyForCreateInput {
  create: [MawahebDescriptionCreateInput!]
  connect: [MawahebDescriptionWhereUniqueInput!]
}

type ImageSwiper {
  id: ID!
  imageURL: String
}

input ImageSwiperWhereUniqueInput {
  id: ID
}

input ImageSwiperWhereInput {
  AND: [ImageSwiperWhereInput!]
  OR: [ImageSwiperWhereInput!]
  NOT: [ImageSwiperWhereInput!]
  id: IDFilter
  imageURL: StringFilter
}

input ImageSwiperOrderByInput {
  id: OrderDirection
  imageURL: OrderDirection
}

input ImageSwiperUpdateInput {
  imageURL: String
}

input ImageSwiperUpdateArgs {
  where: ImageSwiperWhereUniqueInput!
  data: ImageSwiperUpdateInput!
}

input ImageSwiperCreateInput {
  imageURL: String
}

type HowWeMakeDiff {
  id: ID!
  boxId: Int
  title: String
  description: String
  iconSVG: String
  belongingText: String
}

input HowWeMakeDiffWhereUniqueInput {
  id: ID
}

input HowWeMakeDiffWhereInput {
  AND: [HowWeMakeDiffWhereInput!]
  OR: [HowWeMakeDiffWhereInput!]
  NOT: [HowWeMakeDiffWhereInput!]
  id: IDFilter
  boxId: IntFilter
  title: StringFilter
  description: StringFilter
  iconSVG: StringFilter
  belongingText: StringFilter
}

input HowWeMakeDiffOrderByInput {
  id: OrderDirection
  boxId: OrderDirection
  title: OrderDirection
  description: OrderDirection
  iconSVG: OrderDirection
  belongingText: OrderDirection
}

input HowWeMakeDiffUpdateInput {
  boxId: Int
  title: String
  description: String
  iconSVG: String
  belongingText: String
}

input HowWeMakeDiffUpdateArgs {
  where: HowWeMakeDiffWhereUniqueInput!
  data: HowWeMakeDiffUpdateInput!
}

input HowWeMakeDiffCreateInput {
  boxId: Int
  title: String
  description: String
  iconSVG: String
  belongingText: String
}

type SubHeadline {
  id: ID!
  content: String
}

input SubHeadlineWhereUniqueInput {
  id: ID
}

input SubHeadlineWhereInput {
  AND: [SubHeadlineWhereInput!]
  OR: [SubHeadlineWhereInput!]
  NOT: [SubHeadlineWhereInput!]
  id: IDFilter
  content: StringFilter
}

input SubHeadlineOrderByInput {
  id: OrderDirection
  content: OrderDirection
}

input SubHeadlineUpdateInput {
  content: String
}

input SubHeadlineUpdateArgs {
  where: SubHeadlineWhereUniqueInput!
  data: SubHeadlineUpdateInput!
}

input SubHeadlineCreateInput {
  content: String
}

type AddAMember {
  id: ID!
  name: String
  position: String
  role: String
  imageURL: String
}

input AddAMemberWhereUniqueInput {
  id: ID
}

input AddAMemberWhereInput {
  AND: [AddAMemberWhereInput!]
  OR: [AddAMemberWhereInput!]
  NOT: [AddAMemberWhereInput!]
  id: IDFilter
  name: StringFilter
  position: StringFilter
  role: StringFilter
  imageURL: StringFilter
}

input AddAMemberOrderByInput {
  id: OrderDirection
  name: OrderDirection
  position: OrderDirection
  role: OrderDirection
  imageURL: OrderDirection
}

input AddAMemberUpdateInput {
  name: String
  position: String
  role: String
  imageURL: String
}

input AddAMemberUpdateArgs {
  where: AddAMemberWhereUniqueInput!
  data: AddAMemberUpdateInput!
}

input AddAMemberCreateInput {
  name: String
  position: String
  role: String
  imageURL: String
}

type MeetTheTeam {
  id: ID!
  subHeadline: SubHeadline
  members(where: AddAMemberWhereInput! = {}, orderBy: [AddAMemberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddAMemberWhereUniqueInput): [AddAMember!]
  membersCount(where: AddAMemberWhereInput! = {}): Int
}

input MeetTheTeamWhereUniqueInput {
  id: ID
}

input MeetTheTeamWhereInput {
  AND: [MeetTheTeamWhereInput!]
  OR: [MeetTheTeamWhereInput!]
  NOT: [MeetTheTeamWhereInput!]
  id: IDFilter
  subHeadline: SubHeadlineWhereInput
  members: AddAMemberManyRelationFilter
}

input AddAMemberManyRelationFilter {
  every: AddAMemberWhereInput
  some: AddAMemberWhereInput
  none: AddAMemberWhereInput
}

input MeetTheTeamOrderByInput {
  id: OrderDirection
}

input MeetTheTeamUpdateInput {
  subHeadline: SubHeadlineRelateToOneForUpdateInput
  members: AddAMemberRelateToManyForUpdateInput
}

input SubHeadlineRelateToOneForUpdateInput {
  create: SubHeadlineCreateInput
  connect: SubHeadlineWhereUniqueInput
  disconnect: Boolean
}

input AddAMemberRelateToManyForUpdateInput {
  disconnect: [AddAMemberWhereUniqueInput!]
  set: [AddAMemberWhereUniqueInput!]
  create: [AddAMemberCreateInput!]
  connect: [AddAMemberWhereUniqueInput!]
}

input MeetTheTeamUpdateArgs {
  where: MeetTheTeamWhereUniqueInput!
  data: MeetTheTeamUpdateInput!
}

input MeetTheTeamCreateInput {
  subHeadline: SubHeadlineRelateToOneForCreateInput
  members: AddAMemberRelateToManyForCreateInput
}

input SubHeadlineRelateToOneForCreateInput {
  create: SubHeadlineCreateInput
  connect: SubHeadlineWhereUniqueInput
}

input AddAMemberRelateToManyForCreateInput {
  create: [AddAMemberCreateInput!]
  connect: [AddAMemberWhereUniqueInput!]
}

type WantToJoinUs {
  id: ID!
  title: String
  subHeadline: SubHeadline
  emailbutton: String
}

input WantToJoinUsWhereUniqueInput {
  id: ID
}

input WantToJoinUsWhereInput {
  AND: [WantToJoinUsWhereInput!]
  OR: [WantToJoinUsWhereInput!]
  NOT: [WantToJoinUsWhereInput!]
  id: IDFilter
  title: StringFilter
  subHeadline: SubHeadlineWhereInput
  emailbutton: StringFilter
}

input WantToJoinUsOrderByInput {
  id: OrderDirection
  title: OrderDirection
  emailbutton: OrderDirection
}

input WantToJoinUsUpdateInput {
  title: String
  subHeadline: SubHeadlineRelateToOneForUpdateInput
  emailbutton: String
}

input WantToJoinUsUpdateArgs {
  where: WantToJoinUsWhereUniqueInput!
  data: WantToJoinUsUpdateInput!
}

input WantToJoinUsCreateInput {
  title: String
  subHeadline: SubHeadlineRelateToOneForCreateInput
  emailbutton: String
}

type ContactUsForm {
  id: ID!
  title: String
  subHeadline: SubHeadline
}

input ContactUsFormWhereUniqueInput {
  id: ID
}

input ContactUsFormWhereInput {
  AND: [ContactUsFormWhereInput!]
  OR: [ContactUsFormWhereInput!]
  NOT: [ContactUsFormWhereInput!]
  id: IDFilter
  title: StringFilter
  subHeadline: SubHeadlineWhereInput
}

input ContactUsFormOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input ContactUsFormUpdateInput {
  title: String
  subHeadline: SubHeadlineRelateToOneForUpdateInput
}

input ContactUsFormUpdateArgs {
  where: ContactUsFormWhereUniqueInput!
  data: ContactUsFormUpdateInput!
}

input ContactUsFormCreateInput {
  title: String
  subHeadline: SubHeadlineRelateToOneForCreateInput
}

type Location {
  id: ID!
  location: String
  area: String
  contactNumber: String
  email: String
  googleMapsLink: String
  localTime: DateTime
  imageUrl: String
}

input LocationWhereUniqueInput {
  id: ID
}

input LocationWhereInput {
  AND: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  NOT: [LocationWhereInput!]
  id: IDFilter
  location: StringFilter
  area: StringFilter
  contactNumber: StringFilter
  email: StringFilter
  googleMapsLink: StringFilter
  localTime: DateTimeNullableFilter
  imageUrl: StringFilter
}

input LocationOrderByInput {
  id: OrderDirection
  location: OrderDirection
  area: OrderDirection
  contactNumber: OrderDirection
  email: OrderDirection
  googleMapsLink: OrderDirection
  localTime: OrderDirection
  imageUrl: OrderDirection
}

input LocationUpdateInput {
  location: String
  area: String
  contactNumber: String
  email: String
  googleMapsLink: String
  localTime: DateTime
  imageUrl: String
}

input LocationUpdateArgs {
  where: LocationWhereUniqueInput!
  data: LocationUpdateInput!
}

input LocationCreateInput {
  location: String
  area: String
  contactNumber: String
  email: String
  googleMapsLink: String
  localTime: DateTime
  imageUrl: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createFeature(data: FeatureCreateInput!): Feature
  createFeatures(data: [FeatureCreateInput!]!): [Feature]
  updateFeature(where: FeatureWhereUniqueInput!, data: FeatureUpdateInput!): Feature
  updateFeatures(data: [FeatureUpdateArgs!]!): [Feature]
  deleteFeature(where: FeatureWhereUniqueInput!): Feature
  deleteFeatures(where: [FeatureWhereUniqueInput!]!): [Feature]
  createforEmployersSubHeadline(data: forEmployersSubHeadlineCreateInput!): forEmployersSubHeadline
  createForEmployersSubHeadlines(data: [forEmployersSubHeadlineCreateInput!]!): [forEmployersSubHeadline]
  updateforEmployersSubHeadline(where: forEmployersSubHeadlineWhereUniqueInput!, data: forEmployersSubHeadlineUpdateInput!): forEmployersSubHeadline
  updateForEmployersSubHeadlines(data: [forEmployersSubHeadlineUpdateArgs!]!): [forEmployersSubHeadline]
  deleteforEmployersSubHeadline(where: forEmployersSubHeadlineWhereUniqueInput!): forEmployersSubHeadline
  deleteForEmployersSubHeadlines(where: [forEmployersSubHeadlineWhereUniqueInput!]!): [forEmployersSubHeadline]
  createHowItWorks(data: HowItWorksCreateInput!): HowItWorks
  createHowItWorksItems(data: [HowItWorksCreateInput!]!): [HowItWorks]
  updateHowItWorks(where: HowItWorksWhereUniqueInput!, data: HowItWorksUpdateInput!): HowItWorks
  updateHowItWorksItems(data: [HowItWorksUpdateArgs!]!): [HowItWorks]
  deleteHowItWorks(where: HowItWorksWhereUniqueInput!): HowItWorks
  deleteHowItWorksItems(where: [HowItWorksWhereUniqueInput!]!): [HowItWorks]
  createPostHowItWorks(data: PostHowItWorksCreateInput!): PostHowItWorks
  createPostHowItWorksSection(data: [PostHowItWorksCreateInput!]!): [PostHowItWorks]
  updatePostHowItWorks(where: PostHowItWorksWhereUniqueInput!, data: PostHowItWorksUpdateInput!): PostHowItWorks
  updatePostHowItWorksSection(data: [PostHowItWorksUpdateArgs!]!): [PostHowItWorks]
  deletePostHowItWorks(where: PostHowItWorksWhereUniqueInput!): PostHowItWorks
  deletePostHowItWorksSection(where: [PostHowItWorksWhereUniqueInput!]!): [PostHowItWorks]
  createPreWhatTheySayAboutUs(data: PreWhatTheySayAboutUsCreateInput!): PreWhatTheySayAboutUs
  createPreWhatTheySayAboutUsSection(data: [PreWhatTheySayAboutUsCreateInput!]!): [PreWhatTheySayAboutUs]
  updatePreWhatTheySayAboutUs(where: PreWhatTheySayAboutUsWhereUniqueInput!, data: PreWhatTheySayAboutUsUpdateInput!): PreWhatTheySayAboutUs
  updatePreWhatTheySayAboutUsSection(data: [PreWhatTheySayAboutUsUpdateArgs!]!): [PreWhatTheySayAboutUs]
  deletePreWhatTheySayAboutUs(where: PreWhatTheySayAboutUsWhereUniqueInput!): PreWhatTheySayAboutUs
  deletePreWhatTheySayAboutUsSection(where: [PreWhatTheySayAboutUsWhereUniqueInput!]!): [PreWhatTheySayAboutUs]
  createWhyWorkWithUs(data: WhyWorkWithUsCreateInput!): WhyWorkWithUs
  createwhyWorkWithUsSection(data: [WhyWorkWithUsCreateInput!]!): [WhyWorkWithUs]
  updateWhyWorkWithUs(where: WhyWorkWithUsWhereUniqueInput!, data: WhyWorkWithUsUpdateInput!): WhyWorkWithUs
  updatewhyWorkWithUsSection(data: [WhyWorkWithUsUpdateArgs!]!): [WhyWorkWithUs]
  deleteWhyWorkWithUs(where: WhyWorkWithUsWhereUniqueInput!): WhyWorkWithUs
  deletewhyWorkWithUsSection(where: [WhyWorkWithUsWhereUniqueInput!]!): [WhyWorkWithUs]
  createFAQs(data: FAQsCreateInput!): FAQs
  createfaqSection(data: [FAQsCreateInput!]!): [FAQs]
  updateFAQs(where: FAQsWhereUniqueInput!, data: FAQsUpdateInput!): FAQs
  updatefaqSection(data: [FAQsUpdateArgs!]!): [FAQs]
  deleteFAQs(where: FAQsWhereUniqueInput!): FAQs
  deletefaqSection(where: [FAQsWhereUniqueInput!]!): [FAQs]
  createTestimonials(data: TestimonialsCreateInput!): Testimonials
  createtestimonialsSection(data: [TestimonialsCreateInput!]!): [Testimonials]
  updateTestimonials(where: TestimonialsWhereUniqueInput!, data: TestimonialsUpdateInput!): Testimonials
  updatetestimonialsSection(data: [TestimonialsUpdateArgs!]!): [Testimonials]
  deleteTestimonials(where: TestimonialsWhereUniqueInput!): Testimonials
  deletetestimonialsSection(where: [TestimonialsWhereUniqueInput!]!): [Testimonials]
  createBlogCards(data: BlogCardsCreateInput!): BlogCards
  createblogCardSection(data: [BlogCardsCreateInput!]!): [BlogCards]
  updateBlogCards(where: BlogCardsWhereUniqueInput!, data: BlogCardsUpdateInput!): BlogCards
  updateblogCardSection(data: [BlogCardsUpdateArgs!]!): [BlogCards]
  deleteBlogCards(where: BlogCardsWhereUniqueInput!): BlogCards
  deleteblogCardSection(where: [BlogCardsWhereUniqueInput!]!): [BlogCards]
  createSkill(data: SkillCreateInput!): Skill
  createSkills(data: [SkillCreateInput!]!): [Skill]
  updateSkill(where: SkillWhereUniqueInput!, data: SkillUpdateInput!): Skill
  updateSkills(data: [SkillUpdateArgs!]!): [Skill]
  deleteSkill(where: SkillWhereUniqueInput!): Skill
  deleteSkills(where: [SkillWhereUniqueInput!]!): [Skill]
  createJob(data: JobCreateInput!): Job
  createjobSection(data: [JobCreateInput!]!): [Job]
  updateJob(where: JobWhereUniqueInput!, data: JobUpdateInput!): Job
  updatejobSection(data: [JobUpdateArgs!]!): [Job]
  deleteJob(where: JobWhereUniqueInput!): Job
  deletejobSection(where: [JobWhereUniqueInput!]!): [Job]
  createAchievement(data: AchievementCreateInput!): Achievement
  createachievementSection(data: [AchievementCreateInput!]!): [Achievement]
  updateAchievement(where: AchievementWhereUniqueInput!, data: AchievementUpdateInput!): Achievement
  updateachievementSection(data: [AchievementUpdateArgs!]!): [Achievement]
  deleteAchievement(where: AchievementWhereUniqueInput!): Achievement
  deleteachievementSection(where: [AchievementWhereUniqueInput!]!): [Achievement]
  createMawahebTopic(data: MawahebTopicCreateInput!): MawahebTopic
  createMawahebTopics(data: [MawahebTopicCreateInput!]!): [MawahebTopic]
  updateMawahebTopic(where: MawahebTopicWhereUniqueInput!, data: MawahebTopicUpdateInput!): MawahebTopic
  updateMawahebTopics(data: [MawahebTopicUpdateArgs!]!): [MawahebTopic]
  deleteMawahebTopic(where: MawahebTopicWhereUniqueInput!): MawahebTopic
  deleteMawahebTopics(where: [MawahebTopicWhereUniqueInput!]!): [MawahebTopic]
  createMawahebDescription(data: MawahebDescriptionCreateInput!): MawahebDescription
  createMawahebDescriptions(data: [MawahebDescriptionCreateInput!]!): [MawahebDescription]
  updateMawahebDescription(where: MawahebDescriptionWhereUniqueInput!, data: MawahebDescriptionUpdateInput!): MawahebDescription
  updateMawahebDescriptions(data: [MawahebDescriptionUpdateArgs!]!): [MawahebDescription]
  deleteMawahebDescription(where: MawahebDescriptionWhereUniqueInput!): MawahebDescription
  deleteMawahebDescriptions(where: [MawahebDescriptionWhereUniqueInput!]!): [MawahebDescription]
  createMawaheb(data: MawahebCreateInput!): Mawaheb
  createmawahebSection(data: [MawahebCreateInput!]!): [Mawaheb]
  updateMawaheb(where: MawahebWhereUniqueInput!, data: MawahebUpdateInput!): Mawaheb
  updatemawahebSection(data: [MawahebUpdateArgs!]!): [Mawaheb]
  deleteMawaheb(where: MawahebWhereUniqueInput!): Mawaheb
  deletemawahebSection(where: [MawahebWhereUniqueInput!]!): [Mawaheb]
  createImageSwiper(data: ImageSwiperCreateInput!): ImageSwiper
  createimageSwiperSection(data: [ImageSwiperCreateInput!]!): [ImageSwiper]
  updateImageSwiper(where: ImageSwiperWhereUniqueInput!, data: ImageSwiperUpdateInput!): ImageSwiper
  updateimageSwiperSection(data: [ImageSwiperUpdateArgs!]!): [ImageSwiper]
  deleteImageSwiper(where: ImageSwiperWhereUniqueInput!): ImageSwiper
  deleteimageSwiperSection(where: [ImageSwiperWhereUniqueInput!]!): [ImageSwiper]
  createHowWeMakeDiff(data: HowWeMakeDiffCreateInput!): HowWeMakeDiff
  createHowWeMakeDiffSection(data: [HowWeMakeDiffCreateInput!]!): [HowWeMakeDiff]
  updateHowWeMakeDiff(where: HowWeMakeDiffWhereUniqueInput!, data: HowWeMakeDiffUpdateInput!): HowWeMakeDiff
  updateHowWeMakeDiffSection(data: [HowWeMakeDiffUpdateArgs!]!): [HowWeMakeDiff]
  deleteHowWeMakeDiff(where: HowWeMakeDiffWhereUniqueInput!): HowWeMakeDiff
  deleteHowWeMakeDiffSection(where: [HowWeMakeDiffWhereUniqueInput!]!): [HowWeMakeDiff]
  createSubHeadline(data: SubHeadlineCreateInput!): SubHeadline
  createsubHeadlines(data: [SubHeadlineCreateInput!]!): [SubHeadline]
  updateSubHeadline(where: SubHeadlineWhereUniqueInput!, data: SubHeadlineUpdateInput!): SubHeadline
  updatesubHeadlines(data: [SubHeadlineUpdateArgs!]!): [SubHeadline]
  deleteSubHeadline(where: SubHeadlineWhereUniqueInput!): SubHeadline
  deletesubHeadlines(where: [SubHeadlineWhereUniqueInput!]!): [SubHeadline]
  createAddAMember(data: AddAMemberCreateInput!): AddAMember
  createteamMembers(data: [AddAMemberCreateInput!]!): [AddAMember]
  updateAddAMember(where: AddAMemberWhereUniqueInput!, data: AddAMemberUpdateInput!): AddAMember
  updateteamMembers(data: [AddAMemberUpdateArgs!]!): [AddAMember]
  deleteAddAMember(where: AddAMemberWhereUniqueInput!): AddAMember
  deleteteamMembers(where: [AddAMemberWhereUniqueInput!]!): [AddAMember]
  createMeetTheTeam(data: MeetTheTeamCreateInput!): MeetTheTeam
  createmeetTheTeamSection(data: [MeetTheTeamCreateInput!]!): [MeetTheTeam]
  updateMeetTheTeam(where: MeetTheTeamWhereUniqueInput!, data: MeetTheTeamUpdateInput!): MeetTheTeam
  updatemeetTheTeamSection(data: [MeetTheTeamUpdateArgs!]!): [MeetTheTeam]
  deleteMeetTheTeam(where: MeetTheTeamWhereUniqueInput!): MeetTheTeam
  deletemeetTheTeamSection(where: [MeetTheTeamWhereUniqueInput!]!): [MeetTheTeam]
  createWantToJoinUs(data: WantToJoinUsCreateInput!): WantToJoinUs
  createwantToJoinUsSection(data: [WantToJoinUsCreateInput!]!): [WantToJoinUs]
  updateWantToJoinUs(where: WantToJoinUsWhereUniqueInput!, data: WantToJoinUsUpdateInput!): WantToJoinUs
  updatewantToJoinUsSection(data: [WantToJoinUsUpdateArgs!]!): [WantToJoinUs]
  deleteWantToJoinUs(where: WantToJoinUsWhereUniqueInput!): WantToJoinUs
  deletewantToJoinUsSection(where: [WantToJoinUsWhereUniqueInput!]!): [WantToJoinUs]
  createContactUsForm(data: ContactUsFormCreateInput!): ContactUsForm
  createcontactUsFormSection(data: [ContactUsFormCreateInput!]!): [ContactUsForm]
  updateContactUsForm(where: ContactUsFormWhereUniqueInput!, data: ContactUsFormUpdateInput!): ContactUsForm
  updatecontactUsFormSection(data: [ContactUsFormUpdateArgs!]!): [ContactUsForm]
  deleteContactUsForm(where: ContactUsFormWhereUniqueInput!): ContactUsForm
  deletecontactUsFormSection(where: [ContactUsFormWhereUniqueInput!]!): [ContactUsForm]
  createLocation(data: LocationCreateInput!): Location
  createlocationSection(data: [LocationCreateInput!]!): [Location]
  updateLocation(where: LocationWhereUniqueInput!, data: LocationUpdateInput!): Location
  updatelocationSection(data: [LocationUpdateArgs!]!): [Location]
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deletelocationSection(where: [LocationWhereUniqueInput!]!): [Location]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  feature(where: FeatureWhereUniqueInput!): Feature
  features(where: FeatureWhereInput! = {}, orderBy: [FeatureOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FeatureWhereUniqueInput): [Feature!]
  featuresCount(where: FeatureWhereInput! = {}): Int
  forEmployersSubHeadline(where: forEmployersSubHeadlineWhereUniqueInput!): forEmployersSubHeadline
  forEmployersSubHeadlines(where: forEmployersSubHeadlineWhereInput! = {}, orderBy: [forEmployersSubHeadlineOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: forEmployersSubHeadlineWhereUniqueInput): [forEmployersSubHeadline!]
  forEmployersSubHeadlinesCount(where: forEmployersSubHeadlineWhereInput! = {}): Int
  howItWorks(where: HowItWorksWhereUniqueInput!): HowItWorks
  howItWorksItems(where: HowItWorksWhereInput! = {}, orderBy: [HowItWorksOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HowItWorksWhereUniqueInput): [HowItWorks!]
  howItWorksItemsCount(where: HowItWorksWhereInput! = {}): Int
  postHowItWorks(where: PostHowItWorksWhereUniqueInput!): PostHowItWorks
  postHowItWorksSection(where: PostHowItWorksWhereInput! = {}, orderBy: [PostHowItWorksOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostHowItWorksWhereUniqueInput): [PostHowItWorks!]
  postHowItWorksSectionCount(where: PostHowItWorksWhereInput! = {}): Int
  preWhatTheySayAboutUs(where: PreWhatTheySayAboutUsWhereUniqueInput!): PreWhatTheySayAboutUs
  preWhatTheySayAboutUsSection(where: PreWhatTheySayAboutUsWhereInput! = {}, orderBy: [PreWhatTheySayAboutUsOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PreWhatTheySayAboutUsWhereUniqueInput): [PreWhatTheySayAboutUs!]
  preWhatTheySayAboutUsSectionCount(where: PreWhatTheySayAboutUsWhereInput! = {}): Int
  whyWorkWithUs(where: WhyWorkWithUsWhereUniqueInput!): WhyWorkWithUs
  whyWorkWithUsSection(where: WhyWorkWithUsWhereInput! = {}, orderBy: [WhyWorkWithUsOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WhyWorkWithUsWhereUniqueInput): [WhyWorkWithUs!]
  whyWorkWithUsSectionCount(where: WhyWorkWithUsWhereInput! = {}): Int
  fAQs(where: FAQsWhereUniqueInput!): FAQs
  faqSection(where: FAQsWhereInput! = {}, orderBy: [FAQsOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FAQsWhereUniqueInput): [FAQs!]
  faqSectionCount(where: FAQsWhereInput! = {}): Int
  testimonials(where: TestimonialsWhereUniqueInput!): Testimonials
  testimonialsSection(where: TestimonialsWhereInput! = {}, orderBy: [TestimonialsOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TestimonialsWhereUniqueInput): [Testimonials!]
  testimonialsSectionCount(where: TestimonialsWhereInput! = {}): Int
  blogCards(where: BlogCardsWhereUniqueInput!): BlogCards
  blogCardSection(where: BlogCardsWhereInput! = {}, orderBy: [BlogCardsOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BlogCardsWhereUniqueInput): [BlogCards!]
  blogCardSectionCount(where: BlogCardsWhereInput! = {}): Int
  skill(where: SkillWhereUniqueInput!): Skill
  skills(where: SkillWhereInput! = {}, orderBy: [SkillOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SkillWhereUniqueInput): [Skill!]
  skillsCount(where: SkillWhereInput! = {}): Int
  job(where: JobWhereUniqueInput!): Job
  jobSection(where: JobWhereInput! = {}, orderBy: [JobOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: JobWhereUniqueInput): [Job!]
  jobSectionCount(where: JobWhereInput! = {}): Int
  achievement(where: AchievementWhereUniqueInput!): Achievement
  achievementSection(where: AchievementWhereInput! = {}, orderBy: [AchievementOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AchievementWhereUniqueInput): [Achievement!]
  achievementSectionCount(where: AchievementWhereInput! = {}): Int
  mawahebTopic(where: MawahebTopicWhereUniqueInput!): MawahebTopic
  mawahebTopics(where: MawahebTopicWhereInput! = {}, orderBy: [MawahebTopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MawahebTopicWhereUniqueInput): [MawahebTopic!]
  mawahebTopicsCount(where: MawahebTopicWhereInput! = {}): Int
  mawahebDescription(where: MawahebDescriptionWhereUniqueInput!): MawahebDescription
  mawahebDescriptions(where: MawahebDescriptionWhereInput! = {}, orderBy: [MawahebDescriptionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MawahebDescriptionWhereUniqueInput): [MawahebDescription!]
  mawahebDescriptionsCount(where: MawahebDescriptionWhereInput! = {}): Int
  mawaheb(where: MawahebWhereUniqueInput!): Mawaheb
  mawahebSection(where: MawahebWhereInput! = {}, orderBy: [MawahebOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MawahebWhereUniqueInput): [Mawaheb!]
  mawahebSectionCount(where: MawahebWhereInput! = {}): Int
  imageSwiper(where: ImageSwiperWhereUniqueInput!): ImageSwiper
  imageSwiperSection(where: ImageSwiperWhereInput! = {}, orderBy: [ImageSwiperOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ImageSwiperWhereUniqueInput): [ImageSwiper!]
  imageSwiperSectionCount(where: ImageSwiperWhereInput! = {}): Int
  howWeMakeDiff(where: HowWeMakeDiffWhereUniqueInput!): HowWeMakeDiff
  howWeMakeDiffSection(where: HowWeMakeDiffWhereInput! = {}, orderBy: [HowWeMakeDiffOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HowWeMakeDiffWhereUniqueInput): [HowWeMakeDiff!]
  howWeMakeDiffSectionCount(where: HowWeMakeDiffWhereInput! = {}): Int
  subHeadline(where: SubHeadlineWhereUniqueInput!): SubHeadline
  subHeadlines(where: SubHeadlineWhereInput! = {}, orderBy: [SubHeadlineOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubHeadlineWhereUniqueInput): [SubHeadline!]
  subHeadlinesCount(where: SubHeadlineWhereInput! = {}): Int
  addAMember(where: AddAMemberWhereUniqueInput!): AddAMember
  teamMembers(where: AddAMemberWhereInput! = {}, orderBy: [AddAMemberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddAMemberWhereUniqueInput): [AddAMember!]
  teamMembersCount(where: AddAMemberWhereInput! = {}): Int
  meetTheTeam(where: MeetTheTeamWhereUniqueInput!): MeetTheTeam
  meetTheTeamSection(where: MeetTheTeamWhereInput! = {}, orderBy: [MeetTheTeamOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MeetTheTeamWhereUniqueInput): [MeetTheTeam!]
  meetTheTeamSectionCount(where: MeetTheTeamWhereInput! = {}): Int
  wantToJoinUs(where: WantToJoinUsWhereUniqueInput!): WantToJoinUs
  wantToJoinUsSection(where: WantToJoinUsWhereInput! = {}, orderBy: [WantToJoinUsOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WantToJoinUsWhereUniqueInput): [WantToJoinUs!]
  wantToJoinUsSectionCount(where: WantToJoinUsWhereInput! = {}): Int
  contactUsForm(where: ContactUsFormWhereUniqueInput!): ContactUsForm
  contactUsFormSection(where: ContactUsFormWhereInput! = {}, orderBy: [ContactUsFormOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContactUsFormWhereUniqueInput): [ContactUsForm!]
  contactUsFormSectionCount(where: ContactUsFormWhereInput! = {}): Int
  location(where: LocationWhereUniqueInput!): Location
  locationSection(where: LocationWhereInput! = {}, orderBy: [LocationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LocationWhereUniqueInput): [Location!]
  locationSectionCount(where: LocationWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
