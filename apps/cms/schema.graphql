# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  content: Post_content_Document
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input PostUpdateInput {
  title: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: JSON
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type Feature {
  id: ID!
  title: String
  description: String
}

input FeatureWhereUniqueInput {
  id: ID
}

input FeatureWhereInput {
  AND: [FeatureWhereInput!]
  OR: [FeatureWhereInput!]
  NOT: [FeatureWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
}

input FeatureOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
}

input FeatureUpdateInput {
  title: String
  description: String
}

input FeatureUpdateArgs {
  where: FeatureWhereUniqueInput!
  data: FeatureUpdateInput!
}

input FeatureCreateInput {
  title: String
  description: String
}

type forEmployersSubHeadline {
  id: ID!
  content: String
}

input forEmployersSubHeadlineWhereUniqueInput {
  id: ID
}

input forEmployersSubHeadlineWhereInput {
  AND: [forEmployersSubHeadlineWhereInput!]
  OR: [forEmployersSubHeadlineWhereInput!]
  NOT: [forEmployersSubHeadlineWhereInput!]
  id: IDFilter
  content: StringFilter
}

input forEmployersSubHeadlineOrderByInput {
  id: OrderDirection
  content: OrderDirection
}

input forEmployersSubHeadlineUpdateInput {
  content: String
}

input forEmployersSubHeadlineUpdateArgs {
  where: forEmployersSubHeadlineWhereUniqueInput!
  data: forEmployersSubHeadlineUpdateInput!
}

input forEmployersSubHeadlineCreateInput {
  content: String
}

type HowItWorks {
  id: ID!
  stepNb: Int
  title: String
  description: String
  imageURL: String
}

input HowItWorksWhereUniqueInput {
  id: ID
}

input HowItWorksWhereInput {
  AND: [HowItWorksWhereInput!]
  OR: [HowItWorksWhereInput!]
  NOT: [HowItWorksWhereInput!]
  id: IDFilter
  stepNb: IntFilter
  title: StringFilter
  description: StringFilter
  imageURL: StringFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input HowItWorksOrderByInput {
  id: OrderDirection
  stepNb: OrderDirection
  title: OrderDirection
  description: OrderDirection
  imageURL: OrderDirection
}

input HowItWorksUpdateInput {
  stepNb: Int
  title: String
  description: String
  imageURL: String
}

input HowItWorksUpdateArgs {
  where: HowItWorksWhereUniqueInput!
  data: HowItWorksUpdateInput!
}

input HowItWorksCreateInput {
  stepNb: Int
  title: String
  description: String
  imageURL: String
}

type PostHowItWorks {
  id: ID!
  content: String
}

input PostHowItWorksWhereUniqueInput {
  id: ID
}

input PostHowItWorksWhereInput {
  AND: [PostHowItWorksWhereInput!]
  OR: [PostHowItWorksWhereInput!]
  NOT: [PostHowItWorksWhereInput!]
  id: IDFilter
  content: StringFilter
}

input PostHowItWorksOrderByInput {
  id: OrderDirection
  content: OrderDirection
}

input PostHowItWorksUpdateInput {
  content: String
}

input PostHowItWorksUpdateArgs {
  where: PostHowItWorksWhereUniqueInput!
  data: PostHowItWorksUpdateInput!
}

input PostHowItWorksCreateInput {
  content: String
}

type PreWhatTheySayAboutUs {
  id: ID!
  content: String
}

input PreWhatTheySayAboutUsWhereUniqueInput {
  id: ID
}

input PreWhatTheySayAboutUsWhereInput {
  AND: [PreWhatTheySayAboutUsWhereInput!]
  OR: [PreWhatTheySayAboutUsWhereInput!]
  NOT: [PreWhatTheySayAboutUsWhereInput!]
  id: IDFilter
  content: StringFilter
}

input PreWhatTheySayAboutUsOrderByInput {
  id: OrderDirection
  content: OrderDirection
}

input PreWhatTheySayAboutUsUpdateInput {
  content: String
}

input PreWhatTheySayAboutUsUpdateArgs {
  where: PreWhatTheySayAboutUsWhereUniqueInput!
  data: PreWhatTheySayAboutUsUpdateInput!
}

input PreWhatTheySayAboutUsCreateInput {
  content: String
}

type WhyWorkWithUs {
  id: ID!
  title: String
  description: String
}

input WhyWorkWithUsWhereUniqueInput {
  id: ID
}

input WhyWorkWithUsWhereInput {
  AND: [WhyWorkWithUsWhereInput!]
  OR: [WhyWorkWithUsWhereInput!]
  NOT: [WhyWorkWithUsWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
}

input WhyWorkWithUsOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
}

input WhyWorkWithUsUpdateInput {
  title: String
  description: String
}

input WhyWorkWithUsUpdateArgs {
  where: WhyWorkWithUsWhereUniqueInput!
  data: WhyWorkWithUsUpdateInput!
}

input WhyWorkWithUsCreateInput {
  title: String
  description: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createFeature(data: FeatureCreateInput!): Feature
  createFeatures(data: [FeatureCreateInput!]!): [Feature]
  updateFeature(where: FeatureWhereUniqueInput!, data: FeatureUpdateInput!): Feature
  updateFeatures(data: [FeatureUpdateArgs!]!): [Feature]
  deleteFeature(where: FeatureWhereUniqueInput!): Feature
  deleteFeatures(where: [FeatureWhereUniqueInput!]!): [Feature]
  createforEmployersSubHeadline(data: forEmployersSubHeadlineCreateInput!): forEmployersSubHeadline
  createForEmployersSubHeadlines(data: [forEmployersSubHeadlineCreateInput!]!): [forEmployersSubHeadline]
  updateforEmployersSubHeadline(where: forEmployersSubHeadlineWhereUniqueInput!, data: forEmployersSubHeadlineUpdateInput!): forEmployersSubHeadline
  updateForEmployersSubHeadlines(data: [forEmployersSubHeadlineUpdateArgs!]!): [forEmployersSubHeadline]
  deleteforEmployersSubHeadline(where: forEmployersSubHeadlineWhereUniqueInput!): forEmployersSubHeadline
  deleteForEmployersSubHeadlines(where: [forEmployersSubHeadlineWhereUniqueInput!]!): [forEmployersSubHeadline]
  createHowItWorks(data: HowItWorksCreateInput!): HowItWorks
  createHowItWorksItems(data: [HowItWorksCreateInput!]!): [HowItWorks]
  updateHowItWorks(where: HowItWorksWhereUniqueInput!, data: HowItWorksUpdateInput!): HowItWorks
  updateHowItWorksItems(data: [HowItWorksUpdateArgs!]!): [HowItWorks]
  deleteHowItWorks(where: HowItWorksWhereUniqueInput!): HowItWorks
  deleteHowItWorksItems(where: [HowItWorksWhereUniqueInput!]!): [HowItWorks]
  createPostHowItWorks(data: PostHowItWorksCreateInput!): PostHowItWorks
  createPostHowItWorksSection(data: [PostHowItWorksCreateInput!]!): [PostHowItWorks]
  updatePostHowItWorks(where: PostHowItWorksWhereUniqueInput!, data: PostHowItWorksUpdateInput!): PostHowItWorks
  updatePostHowItWorksSection(data: [PostHowItWorksUpdateArgs!]!): [PostHowItWorks]
  deletePostHowItWorks(where: PostHowItWorksWhereUniqueInput!): PostHowItWorks
  deletePostHowItWorksSection(where: [PostHowItWorksWhereUniqueInput!]!): [PostHowItWorks]
  createPreWhatTheySayAboutUs(data: PreWhatTheySayAboutUsCreateInput!): PreWhatTheySayAboutUs
  createPreWhatTheySayAboutUsSection(data: [PreWhatTheySayAboutUsCreateInput!]!): [PreWhatTheySayAboutUs]
  updatePreWhatTheySayAboutUs(where: PreWhatTheySayAboutUsWhereUniqueInput!, data: PreWhatTheySayAboutUsUpdateInput!): PreWhatTheySayAboutUs
  updatePreWhatTheySayAboutUsSection(data: [PreWhatTheySayAboutUsUpdateArgs!]!): [PreWhatTheySayAboutUs]
  deletePreWhatTheySayAboutUs(where: PreWhatTheySayAboutUsWhereUniqueInput!): PreWhatTheySayAboutUs
  deletePreWhatTheySayAboutUsSection(where: [PreWhatTheySayAboutUsWhereUniqueInput!]!): [PreWhatTheySayAboutUs]
  createWhyWorkWithUs(data: WhyWorkWithUsCreateInput!): WhyWorkWithUs
  createwhyWorkWithUsSection(data: [WhyWorkWithUsCreateInput!]!): [WhyWorkWithUs]
  updateWhyWorkWithUs(where: WhyWorkWithUsWhereUniqueInput!, data: WhyWorkWithUsUpdateInput!): WhyWorkWithUs
  updatewhyWorkWithUsSection(data: [WhyWorkWithUsUpdateArgs!]!): [WhyWorkWithUs]
  deleteWhyWorkWithUs(where: WhyWorkWithUsWhereUniqueInput!): WhyWorkWithUs
  deletewhyWorkWithUsSection(where: [WhyWorkWithUsWhereUniqueInput!]!): [WhyWorkWithUs]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  feature(where: FeatureWhereUniqueInput!): Feature
  features(where: FeatureWhereInput! = {}, orderBy: [FeatureOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FeatureWhereUniqueInput): [Feature!]
  featuresCount(where: FeatureWhereInput! = {}): Int
  forEmployersSubHeadline(where: forEmployersSubHeadlineWhereUniqueInput!): forEmployersSubHeadline
  forEmployersSubHeadlines(where: forEmployersSubHeadlineWhereInput! = {}, orderBy: [forEmployersSubHeadlineOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: forEmployersSubHeadlineWhereUniqueInput): [forEmployersSubHeadline!]
  forEmployersSubHeadlinesCount(where: forEmployersSubHeadlineWhereInput! = {}): Int
  howItWorks(where: HowItWorksWhereUniqueInput!): HowItWorks
  howItWorksItems(where: HowItWorksWhereInput! = {}, orderBy: [HowItWorksOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HowItWorksWhereUniqueInput): [HowItWorks!]
  howItWorksItemsCount(where: HowItWorksWhereInput! = {}): Int
  postHowItWorks(where: PostHowItWorksWhereUniqueInput!): PostHowItWorks
  postHowItWorksSection(where: PostHowItWorksWhereInput! = {}, orderBy: [PostHowItWorksOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostHowItWorksWhereUniqueInput): [PostHowItWorks!]
  postHowItWorksSectionCount(where: PostHowItWorksWhereInput! = {}): Int
  preWhatTheySayAboutUs(where: PreWhatTheySayAboutUsWhereUniqueInput!): PreWhatTheySayAboutUs
  preWhatTheySayAboutUsSection(where: PreWhatTheySayAboutUsWhereInput! = {}, orderBy: [PreWhatTheySayAboutUsOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PreWhatTheySayAboutUsWhereUniqueInput): [PreWhatTheySayAboutUs!]
  preWhatTheySayAboutUsSectionCount(where: PreWhatTheySayAboutUsWhereInput! = {}): Int
  whyWorkWithUs(where: WhyWorkWithUsWhereUniqueInput!): WhyWorkWithUs
  whyWorkWithUsSection(where: WhyWorkWithUsWhereInput! = {}, orderBy: [WhyWorkWithUsOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WhyWorkWithUsWhereUniqueInput): [WhyWorkWithUs!]
  whyWorkWithUsSectionCount(where: WhyWorkWithUsWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
