# version: '3.9' # Defines the Compose file format version

services:
  # ------------------ FRONTEND SERVICE ------------------
  frontend:
    # Optional build block (commented out because we're using a prebuilt image from Docker Hub)
    # build:
    #   context: .               # The directory containing the Dockerfile
    #   dockerfile: frontend.Dockerfile
    image: jasonjinkson/mawaheb-mena:frontend-latest # Prebuilt frontend image
    container_name: frontend # Name of the container when running
    ports:
      - '5173:5173' # Map local port 5173 â†’ container port 5173
    environment:
      - NODE_ENV=production
      - NODE_TLS_REJECT_UNAUTHORIZED=0
    restart: unless-stopped # Restart if stopped unless explicitly stopped by user
    networks:
      - app-network # Use the custom bridge network for communication with other services
    depends_on:
      - cms # Wait for CMS service to start before starting frontend
      - backend # Wait for backend
      - redis # Wait for Redis
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:5173/api/health'] # Check frontend API health
      interval: 30s # Run healthcheck every 30 seconds
      timeout: 10s # Fail if no response within 10s
      retries: 3 # Fail after 3 unsuccessful checks
      start_period: 10s # Delay before starting checks

  # ------------------ BACKEND SERVICE ------------------
  backend:
    # build:
    #   context: .
    #   dockerfile: backend.Dockerfile
    image: jasonjinkson/mawaheb-mena:backend-latest
    container_name: backend
    ports:
      - '3002:3002'
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis # Name of Redis service in Compose (Docker DNS resolves it)
      # - NODE_TLS_REJECT_UNAUTHORIZED=0
      - FRONTEND_URL=http://localhost:5173
      - PORT=3002
      - REDIS_PORT=6379
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - redis # Backend won't start before Redis
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3002/health/ || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ------------------ CMS SERVICE ------------------
  cms:
    # build:
    #   context: .
    #   dockerfile: cms.Dockerfile
    image: jasonjinkson/mawaheb-mena:cms-latest
    container_name: cms
    ports:
      - '3001:3001'
    environment:
      - NODE_ENV=production
      - NODE_TLS_REJECT_UNAUTHORIZED=0
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3001/api/healthcheck || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # neo4j:
  #   image: neo4j:latest
  #   volumes:
  #     - ./apps/neo4j/db/logs:/logs
  #     - ./apps/neo4j/db/config:/config
  #     - ./apps/neo4j/db/data:/data
  #     - ./apps/neo4j/db/plugins:/plugins
  #   environment:
  #     - NEO4J_AUTH=neo4j/password
  #   ports:
  #     - '7474:7474'
  #     - '7687:7687'
  #   restart: on-failure

  # ------------------ REDIS SERVICE ------------------
  redis:
    image: redis:latest # Official Redis image
    container_name: redis
    ports:
      - '6379:6379' # Redis default port
    volumes:
      - redis_data:/data # Persist Redis data
    command: redis-server --appendonly yes # Enable persistence
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

# ------------------ NETWORKS ------------------
networks:
  app-network:
    driver: bridge # Custom bridge network for service-to-service communication

# ------------------ VOLUMES ------------------
volumes:
  redis_data:
    driver: local # Store Redis data locally on host machine
