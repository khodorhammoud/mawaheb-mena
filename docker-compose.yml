# version: '3.9' # Defines the Compose file format version

services:
  # ------------------ FRONTEND SERVICE ------------------
  frontend:
    # Optional build block (commented out because we're using a prebuilt image from Docker Hub)
    # build:
    #   context: .               # The directory containing the Dockerfile
    #   dockerfile: frontend.Dockerfile
    image: jasonjinkson/mawaheb-mena:frontend-latest # Prebuilt frontend image
    container_name: frontend # Name of the container when running
    ports:
      - '5173:5173' # Map local port 5173 â†’ container port 5173
    environment:
      - NODE_ENV=production
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - FRONTEND_URL=http://frontend:5173
      - BACKEND_URL=http://backend:3002
      - CMS_BASE_URL=http://cms:3001
    restart: unless-stopped
    networks:
      - app-network # Use the custom bridge network for communication with other services
    depends_on:
      - cms
      - backend
      - redis
      - postgres
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:5173/api/health'] # Check frontend API health
      interval: 30s # Run healthcheck every 30 seconds
      timeout: 10s # Fail if no response within 10s
      retries: 3 # Fail after 3 unsuccessful checks
      start_period: 10s # Delay before starting checks

  # ------------------ BACKEND SERVICE ------------------
  backend:
    # build:
    #   context: .
    #   dockerfile: backend.Dockerfile
    image: jasonjinkson/mawaheb-mena:backend-latest
    container_name: backend
    ports:
      - '3002:3002'
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - FRONTEND_URL=http://frontend:5173
      - PORT=3002
      - HOST_URL=http://localhost:3002
      - NEO4J_URL=bolt://neo4j:7687
      - DATABASE_URL=postgresql://mawaheb_user:mawaheb_password@postgres:5432/mawaheb
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - redis
      - postgres
      - neo4j
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3002/health/ || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ------------------ CMS SERVICE ------------------
  cms:
    # build:
    #   context: .
    #   dockerfile: cms.Dockerfile
    image: jasonjinkson/mawaheb-mena:cms-latest
    container_name: cms
    ports:
      - '3001:3001'
    environment:
      - NODE_ENV=production
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - FRONTEND_URL=http://frontend:5173
      - PORT=3001
      - DATABASE_URL=postgresql://mawaheb_user:mawaheb_password@postgres:5432/mawaheb-cms
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - postgres
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3001/api/healthcheck || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_USER=mawaheb_user
      - POSTGRES_PASSWORD=mawaheb_password
      - POSTGRES_DB=mawaheb
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init-scripts:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U mawaheb_user -d mawaheb']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  neo4j:
    image: neo4j:5.26.9-community
    container_name: neo4j
    volumes:
      - ./apps/packages/db/neo4j/logs:/logs
      - ./apps/packages/db/neo4j/config:/config
      - ./apps/packages/db/neo4j/data:/data
      - ./apps/packages/db/neo4j/plugins:/plugins
    environment:
      - NEO4J_AUTH=neo4j/password
    ports:
      - '7474:7474'
      - '7687:7687'
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:7474/']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ------------------ REDIS SERVICE ------------------
  redis:
    image: redis:latest # Official Redis image
    container_name: redis
    ports:
      - '6379:6379' # Redis default port
    volumes:
      - redis_data:/data # Persist Redis data
    command: redis-server --appendonly yes # Enable persistence
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

# ------------------ NETWORKS ------------------
networks:
  app-network:
    driver: bridge # Custom bridge network for service-to-service communication

# ------------------ VOLUMES ------------------
volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
