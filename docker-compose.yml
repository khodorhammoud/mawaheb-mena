version: '3.8'

services:
  frontend:
    build:
      context: .
      dockerfile: frontend.Dockerfile
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://mawaheb_owner:cltE5b0qUgdv@ep-still-wind-a236960h-pooler.eu-central-1.aws.neon.tech/mawaheb?sslmode=require
      - CMS_BASE_URL=http://cms:3001
      - BACKEND_URL=http://backend:3002
      - REDIS_URL=redis://redis:6379
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - STRAPI_API_KEY=${STRAPI_API_KEY}
      - STRAPI_API=${STRAPI_API}
      - bycryptSalt=${bycryptSalt}
      - PGHOST=${PGHOST}
      - PGDATABASE=${PGDATABASE}
      - PGUSER=${PGUSER}
      - PGPASSWORD=${PGPASSWORD}
      - ENDPOINT_ID=${ENDPOINT_ID}
      - BREVO_API_KEY=${BREVO_API_KEY}
      - EMAIL_FROM=${EMAIL_FROM}
      - HOST_URL=${HOST_URL}
      - CMS_BASE_URL=${CMS_BASE_URL}
      - GOOGLE_STORAGE_APPLICATION_CREDENTIALS=${GOOGLE_STORAGE_APPLICATION_CREDENTIALS}
      - GOOGLE_PROJECT_ID=${GOOGLE_PROJECT_ID}
      - GOOGLE_STORAGE_BUCKET_NAME=${GOOGLE_STORAGE_BUCKET_NAME}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_CALLBACK_URL_EMPLOYER=${GOOGLE_CALLBACK_URL_EMPLOYER}
      - GOOGLE_CALLBACK_URL_FREELANCER=${GOOGLE_CALLBACK_URL_FREELANCER}
      - GOOGLE_CALLBACK_URL=${GOOGLE_CALLBACK_URL}
      - AWS_REGION=${AWS_REGION}
      - STORAGE_PROVIDER=${STORAGE_PROVIDER}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_PRIVATE_BUCKET_NAME=${S3_PRIVATE_BUCKET_NAME}
      - S3_PUBLIC_BUCKET_NAME=${S3_PUBLIC_BUCKET_NAME}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - cms
      - backend
      - redis
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  backend:
    build:
      context: .
      dockerfile: backend.Dockerfile
    ports:
      - '3002:3002'
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://mawaheb_owner:cltE5b0qUgdv@ep-still-wind-a236960h.eu-central-1.aws.neon.tech/mawaheb?sslmode=require
      - REDIS_URL=redis://redis:6379
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      # Add all other environment variables from .env file
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - redis
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3002/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  cms:
    build:
      context: .
      dockerfile: cms.Dockerfile
    ports:
      - '3001:3001'
    environment:
      - NODE_ENV=production
      - POSTGRESQL_CONNECTION_STRING=postgresql://mawaheb_owner:cltE5b0qUgdv@ep-still-wind-a236960h.eu-central-1.aws.neon.tech/mawaheb-cms?sslmode=require
      - SESSION_SECRET=thisisthesessionsecretthatislongerthan32charactersandisveryniceee
      - JWT_SECRET=pTwU3YcVZwG2THts0km73A==
      - NODE_TLS_REJECT_UNAUTHORIZED=0
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3001/api/healthcheck || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - app-network

  # Optional PostgreSQL service if needed
  # postgres:
  #   image: postgres:15-alpine
  #   ports:
  #     - "5432:5432"
  #   environment:
  #     - POSTGRES_USER=${PGUSER}
  #     - POSTGRES_PASSWORD=${PGPASSWORD}
  #     - POSTGRES_DB=${PGDATABASE}
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #   networks:
  #     - app-network

networks:
  app-network:
    driver: bridge

volumes:
  redis_data:
    driver: local
  # postgres-data:
