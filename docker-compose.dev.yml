services:
  # ----------------- FRONTEND (Remix + Vite in DEV) -----------------
  # docker-compose.dev.yml (frontend-dev service)
  frontend-dev:
    build:
      context: .
      dockerfile: frontend.Dockerfile
      target: runner # keep this; if you drop it, keep working_dir below
    working_dir: /app/apps/frontend # ensures relative command works
    command: ['node', 'server.js'] # you can also do: ["node","/app/apps/frontend/server.js"] # this is SO MUCH IMPORTANT :))))))))))))))))))
    ports:
      - '5173:5173'
    environment:
      - NODE_ENV=development
      - PORT=5173
      - CMS_BASE_URL=http://cms-dev:3001
      - BACKEND_URL=http://backend-dev:3002
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/mawaheb?schema=public # this is so much important i think also, but the command as it is is more important
    depends_on:
      cms-dev:
        condition: service_healthy
      backend-dev:
        condition: service_started
      db:
        condition: service_healthy
    networks: [mawaheb-dev-network]
    restart: unless-stopped

  # ----------------- CMS (Keystone in DEV) -----------------
  cms-dev:
    build:
      context: .
      dockerfile: cms.Dockerfile
    # working_dir: /app/apps/cms # <— run from CMS dir
    # command: npm run dev # <— use your package script
    ports:
      - '3001:3001'
    command: >
      sh -c "
      npx prisma db push --schema /app/apps/cms/schema.prisma &&
      npx prisma generate --schema /app/apps/cms/schema.prisma &&
      pnpm start
      "

    # volumes:
    # - cms_dev_data:/app/apps/cms/.keystone   # ❌ don't mount dev state onto a prod image

    environment:
      - NODE_ENV=development
      - HOST=0.0.0.0
      - PORT=3001
      - SESSION_SECRET=thisisthesessionsecretthatislongerthan32charactersandisveryniceee
      # Use ONE of these DB URLs:
      - DATABASE_URL=postgresql://mawaheb_owner:cltE5b0qUgdv@ep-still-wind-a236960h.eu-central-1.aws.neon.tech/mawaheb-cms?sslmode=require
      # - DATABASE_URL=postgresql://postgres:postgres@db:5432/mawaheb?schema=public  # <— switch to this if you want local DB

    # depends_on:   # optional to remove if you won't use local db
    #   - db

    networks:
      - mawaheb-dev-network
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'node -e "require(''http'').request({host:''localhost'',port:3001,method:''HEAD'',path:''/''},r=>process.exit(r.statusCode<600?0:1)).on(''error'',()=>process.exit(1)).end()"',
        ]
      interval: 5s
      timeout: 3s
      retries: 60
      start_period: 90s

  # ----------------- POSTGRES (DB for CMS) -----------------
  db:
    image: postgres:16.1-alpine
    container_name: database
    restart: unless-stopped
    #command: -p ${PGPORT:-5432}  # use this only if you need a custom internal port
    ports:
      - '5432:5432' # expose so GUI tools on host can connect
    environment:
      - POSTGRES_USER=${PGUSER:-postgres}
      - POSTGRES_PASSWORD=${PGPASSWORD:-postgres}
      - POSTGRES_DB=${PGDATABASE:-mawaheb}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mawaheb-dev-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d mawaheb -h localhost -p 5432']
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

  # ---------- BACKEND (Node, your Dockerfile above) ----------
  backend-dev:
    build:
      context: .
      dockerfile: backend.Dockerfile
      target: runner
    working_dir: /app/apps/backend
    command: ['node', 'dist/main']
    ports:
      - '3002:3002'
    environment:
      NODE_ENV: development
      DATABASE_URL: 'postgresql://mawaheb_owner:cltE5b0qUgdv@ep-still-wind-a236960h.eu-central-1.aws.neon.tech/mawaheb-cms?sslmode=require' # this is the online backend database
      DATABASE_SSL: 'false'
      REDIS_URL: 'redis://redis:6379'
      HOST: '0.0.0.0'
      PORT: '3002'
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks: [mawaheb-dev-network]
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'wget -qO- http://localhost:3002/health >/dev/null 2>&1 || exit 1']
      interval: 10s
      timeout: 3s
      retries: 20
      start_period: 15s

  # ---------- REDIS (for backend cache/queues) ----------
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks: [mawaheb-dev-network]
    healthcheck:
      test: ['CMD-SHELL', 'redis-cli ping | grep PONG']
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 5s

  # ----------------- OPTIONALS (commented for now) -----------------
  # nginx:
  #   container_name: nginx
  #   image: nginx:stable-alpine
  #   ports:
  #     - '80:80'
  #     - '443:443'
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/conf.d/default.conf
  #     - ./ssl:/etc/nginx/ssl
  #   restart: unless-stopped

  # cms:
  #   # Production-like CMS (not dev). Don’t run together with cms-dev (port conflict).
  #   container_name: keystone
  #   build:
  #     context: .
  #     dockerfile: cms.Dockerfile
  #   ports:
  #     - '3000:3000'
  #   depends_on:
  #     - db
  #   environment:
  #     - DATABASE_URL=postgresql://${PGUSER:-postgres}:${PGPASSWORD:-postgres}@db:5432/${PGDATABASE:-mawaheb}
  #   volumes:
  #     - ./apps/cms:/app/apps/cms
  #     - cms_node_modules:/app/apps/cms/node_modules

  # neo4j:
  #   container_name: neo4j
  #   image: neo4j:5.17-enterprise
  #   restart: unless-stopped
  #   ports:
  #     - '7474:7474' # HTTP
  #     - '7687:7687' # Bolt
  #   environment:
  #     - NEO4J_AUTH=${NEO4J_USERNAME:-neo4j}/${NEO4J_PASSWORD:-skillfolio}
  #     - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
  #   volumes:
  #     - neo4j_data:/data
  #     - neo4j_logs:/logs

  #     - neo4j_import:/import
  #   networks:
  #     - mawaheb-dev-network

# ----------------- NETWORK (all services talk on this bridge) -----------------
networks:
  mawaheb-dev-network:
    driver: bridge

# ----------------- VOLUMES (data persistence) -----------------
volumes:
  cms_dev_data:
  postgres_data:
  redis_data:
  # cms_node_modules:
  # neo4j_data:
  # neo4j_logs:
  # neo4j_import:
